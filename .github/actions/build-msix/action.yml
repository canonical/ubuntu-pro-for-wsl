name: Build UP4W MSIX
description: Build UP4W MSIX for testing and publication
inputs:
  mode:
    required: true
    description: "Configure mode publication. Should be either production or end_to_end_tests"
    default: "production"
  package-mode:
    required: true
    description: "Configure package mode. Should be either 'StoreUpload' or 'SideloadOnly'"
    default: "SideloadOnly"
  certificate:
    required: true
    description: "certificate to pass to sign the msix"
  certificate_password:
    required: true
    description: "certificate_password to pass to sign the msix"
  run-code-analysis:
    required: false
    description: "Whether to run code analysis during the build"
    default: "true"
outputs:
  msix-version:
    description: "The version of the built MSIX bundle"
    value: ${{ steps.build.outputs.UP4W_VERSION }}
  is-pre-release:
    description: "Whether the version is a pre-release or stable release"
    value: ${{ steps.build.outputs.STABLE_OR }}
runs:
  using: "composite"
  steps:
    - uses: actions/setup-go@v5
      with:
        go-version-file: go.work
    - name: Read flutter version
      id: flutter-version
      uses: ./.github/actions/read-file
      with:
        path: tools/flutter-version
    - uses: subosito/flutter-action@v2
      with:
        channel: stable
        flutter-version: ${{ steps.flutter-version.outputs.contents }}
    - name: Setup MSBuild (PATH)
      uses: microsoft/setup-msbuild@v2
    - name: Install certificate
      shell: powershell
      run: |
        New-Item -ItemType directory -Path certificate
        Set-Content -Path certificate\certificate.txt -Value '${{ inputs.certificate }}'
        certutil -decode certificate\certificate.txt certificate\certificate.pfx

        $pwd = ConvertTo-SecureString '${{ inputs.certificate_password }}' -AsPlainText -Force
        Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:LocalMachine\Trust -FilePath certificate\certificate.pfx
        Import-PfxCertificate -Password $pwd -CertStoreLocation Cert:CurrentUser\My -FilePath certificate\certificate.pfx

        Remove-Item certificate\ -Recurse
    - name: Build Bundle
      id: build
      shell: powershell
      run: |
        # Set up the full version (displayed in logs)
        $versionInfo=ConvertFrom-Json $(go run .\tools\build\compute_version.go --json)
        $env:UP4W_FULL_VERSION=$($versionInfo.full_version)
        $tag=$($versionInfo.tag)

        # Set up the numeric version (used in the AppxManifest)
        $UP4W_VERSION=$($versionInfo.numeric_version)

        # Whether this is a 'stable' or 'pre-release'
        $releaseType=$($versionInfo.release_type)

        [Reflection.Assembly]::LoadWithPartialName("System.Xml.Linq")
        $path = "$PWD/Msix/UbuntuProForWSL/Package.appxmanifest"
        $doc = [System.Xml.Linq.XDocument]::Load($path)
        $xName = [System.Xml.Linq.XName]::Get("{http://schemas.microsoft.com/appx/manifest/foundation/windows10}Identity")
        $doc.Root.Element($xName).Attribute("Version").Value = "${UP4W_VERSION}.0";
        $doc.Save($path)

        # Do the same with the app installer file
        # with both the app installer file and main bundle versions the same as $UP4W_VERSION.
        $path = "$PWD/Msix/UbuntuProForWSL/UbuntuProForWSL.appinstaller"
        $doc = [System.Xml.Linq.XDocument]::Load($path)
        $ns = $doc.Root.Name.Namespace
        $doc.Root.SetAttributeValue("Version", "${UP4W_VERSION}.0")
        $mainBundle = $doc.Root.Element($ns + "MainBundle")
        if ($mainBundle) {
          $mainBundle.SetAttributeValue("Version", "${UP4W_VERSION}.0")
          $mainBundle.SetAttributeValue("Uri", "https://github.com/canonical/ubuntu-pro-for-wsl/releases/download/${tag}/UbuntuProForWSL.msixbundle")
        }
        if ($releaseType -eq "pre-release") {
          # Point the App Installer file to the repo wiki instead of the latest stable release.
          $doc.Root.SetAttributeValue("Uri", "https://raw.githubusercontent.com/wiki/canonical/ubuntu-pro-for-wsl/pre-release/UbuntuProForWSL.appinstaller")
        }
        $doc.Save($path)

        # Outputs for the next steps
        "UP4W_VERSION=${UP4W_VERSION}.0" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8
        "STABLE_OR=${releaseType}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

        # Set up the mock
        $env:UP4W_TEST_WITH_MS_STORE_MOCK=${{ inputs.mode == 'end_to_end_tests' && '1' || '$null'}}

        # Build
        msbuild                                                                             `
          .\msix\msix.sln                                                                   `
          -target:Build                                                                     `
          -maxCpuCount                                                                      `
          -nodeReuse:false                                                                  `
          -property:Configuration=${{ inputs.mode == 'production' && 'Release' || 'Debug'}} `
          -property:AppxBundle=Always                                                       `
          -property:AppxBundlePlatforms=x64                                                 `
          -property:UapAppxPackageBuildMode=${{ inputs.package-mode }}                      `
          -property:UP4W_END_TO_END=${{ inputs.mode == 'end_to_end_tests' }}                `
          -property:RunCodeAnalysis=${{ inputs.run-code-analysis }}                      `
          -nologo                                                                           `
          -verbosity:normal
