name: Publish MSIX app to the Microsoft Store
concurrency: publish-msix
on:
  workflow_dispatch:
  push:
    tags:
      - '*'
jobs:
  publish-msix:
    permissions:
      contents: write
    name: Publish MSIX app to the Microsoft Store
    runs-on: windows-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
        with:
          fetch-tags: true
          fetch-depth: 0
      - name: Build MSIX Bundle
        uses: ./.github/actions/build-msix
        id: build-msix
        with:
          certificate: ${{ secrets.CERTIFICATE }}
          certificate_password: ${{ secrets.CERTIFICATE_PASSWORD }}
          package-mode: StoreUpload
          run-code-analysis: false
      - name: Install Store Broker
        shell: powershell
        run: |
          Install-Module -Name StoreBroker -AcceptLicense -Force -Scope CurrentUser -Verbose
      - name: Submit to Microsoft Store
        shell: powershell
        env:
          pre_release: ${{ steps.build-msix.outputs.is-pre-release }}
        run: |
          New-Item -ItemType directory -Path store -Force

          # Authenticate against the store
          $pass = ConvertTo-SecureString -String '${{ secrets.PRO_APP_PUBLICATION_APPKEY }}' -AsPlainText -Force
          $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ${{ secrets.AZUREAD_APPID }},$pass
          Set-StoreBrokerAuthentication -TenantId '${{ secrets.AZUREAD_TENANTID }}' -Credential $cred

          # Set store app ID for AppID
          $appid = "9PD1WZNBDXKZ"

          # Prepare and submit to the Store
          $sub = ""
          $url = ""
          New-SubmissionPackage -ConfigPath .\msix\SBConfig.json -Verbose
          $subFileStem="out\appstore-submission"
          Get-Content "$subFileStem.json"
          if ($env:pre_release -eq "pre-release") {
            # The existing package flight for beta testers.
            $flightId="876dc297-0b4d-4a74-94ef-720279050fc4"
            Write-Output "Starting a new submission under package flight $flightId from:"
            Get-ChildItem ./msix/UbuntuProForWSL/AppPackages/
            $sub, $url = Update-ApplicationFlightSubmission -AppId $appid -FlightId $flightId -SubmissionDataPath "$subFileStem.json" -PackagePath "$subFileStem.zip" -Force -AutoCommit -ReplacePackages -Verbose
          } else {
            $sub, $url = Update-ApplicationSubmission -AppId $appid -SubmissionDataPath "$subFileStem.json" -PackagePath "$subFileStem.zip" -Force -ReplacePackages -AutoCommit -Verbose
          }
          Write-Output "If needed the package built by this run can be downloaded from:"
          Write-Output $url
          Write-Output "Access the submission via the link below:"
          Write-Output "https://partner.microsoft.com/en-us/dashboard/products/$appid/submissions/$sub/"
      - name: Create the GH Release
        shell: powershell
        id: create-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          version: ${{ steps.build-msix.outputs.msix-version }}
          pre_release: ${{ steps.build-msix.outputs.is-pre-release }}
          tag: ${{ github.ref_name }}
        run: |
          # Intentionally not copying the msixbundle, as it is already uploaded to the store
          # We wanted the msix bundle signed by the store instead, reason why we don't mark this as 'latest'
          # and draft, so it doesn't appear as a published release.
          $appinstallerFile="msix\UbuntuProForWSL\UbuntuProForWSL.appinstaller"
          if ($env:pre_release -eq "pre-release") {
            Write-output "Creating a new pre-release draft"
            # TODO: Once we have a real first release, place back the `--generate-notes` option.
            gh release create "${env:tag}" --draft --prerelease --latest=false --title "${env:version}" --verify-tag -- "${appinstallerFile}"
          } else {
            gh release create "${env:tag}" --draft --latest --title "${env:version}" --verify-tag -- "${appinstallerFile}"
          }
          Write-Output "This is a draft release. Once the submission is completed in MS Partner Center, the MSIX package must be downloaded and included as a release asset."
      - name: Check out the repository wiki
        uses: actions/checkout@v5
        with:
          repository: canonical/ubuntu-pro-for-wsl.wiki
          path: wiki
      - name: Store the App Installer File for the pre-release audience
        shell: powershell
        working-directory: './wiki'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $folder = ".\pre-release\"
          New-Item -Path "$folder" -ItemType Directory -Force
          Copy-Item ..\msix\UbuntuProForWSL\UbuntuProForWSL.appinstaller "$folder"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$folder"
          git commit -m "Auto-update pre-release assets"
          git push origin master
