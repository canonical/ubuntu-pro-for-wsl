name: QA

on:
  pull_request:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: QA-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  quality-go:
    name: "Go Quality checks"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows]
        subproject: ["agentapi", "windows-agent", "wsl-pro-service"]
        exclude:
          - os: windows
            subproject: wsl-pro-service

    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Set up git
        # This step needs to be done before checkout so that the checkout respects clrf
        uses: canonical/ubuntu-pro-for-windows/.github/actions/setup-git@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: ${{ matrix.subproject }}/go.mod
      - name: Update module files
        shell: bash
        if: always() && !cancelled()
        working-directory: ${{ matrix.subproject }}
        run: |
          # Ensuring there is no diff between current and generated go.mod and go.sum files
          set -eu

          echo "::group::Download dependencies"
          go mod tidy
          echo "::endgroup::"
      - name: Ensure module files are up to date
        uses: ./.github/actions/check-diff
        with:
          files-to-validate: ${{ matrix.subproject }}/**/go.mod ${{ matrix.subproject }}/**/go.sum
      - name: Build
        shell: bash
        if: always() && !cancelled()
        working-directory: ${{ matrix.subproject }}
        run: |
          go build -tags=gowslmock ./...
      - name: Linter
        uses: golangci/golangci-lint-action@v3
        if: always() && !cancelled()
        with:
          version: v1.52.0
          args: --config=${{ github.workspace }}/.golangci.yaml --build-tags=gowslmock
          working-directory: ${{ matrix.subproject }}
      - name: Gettext validation
        run: |
          set -eu

          grep -nr --include="*.go" 'i18n.G([^"]' ./* | grep -Pv '_test.go:' > text.log || true
          [ -z "$(cat text.log)" ] && exit 0

          echo 'Bad i18n.G calls. Gettext will only detect calls of type G("text"), with double quotes.'
          cat text.log
          exit 1

  quality-flutter:
    name: "Flutter Quality checks"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows]
        package: ["gui/packages/p4w_ms_store", "gui/packages/ubuntupro"]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Set up git
        # This step needs to be done before checkout so that the checkout respects clrf
        uses: canonical/ubuntu-pro-for-windows/.github/actions/setup-git@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Flutter QA
        uses: ./.github/actions/flutter-qa/
        with:
          flutter-version: '3.7.x'
          package-dir: '${{ matrix.package }}'


  tests-go-with-mocks:
    name: "Run Go tests with mocks"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, windows]
        subproject: ["agentapi", "windows-agent", "wsl-pro-service"]
        exclude:
          - os: windows
            subproject: wsl-pro-service
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: ${{ matrix.subproject }}/go.mod
      - name: Set up git
        uses: ./.github/actions/setup-git
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run tests
        shell: bash
        if: always() && !cancelled()
        working-directory: ${{ matrix.subproject }}
        run: |
          go test -coverpkg=./... -coverprofile=/tmp/coverage.out -covermode=count ./... -tags=gowslmock
      - name: Run tests (with race detector)
        shell: bash
        # -race not supported on Windows
        if: matrix.os != 'windows'
        working-directory: ${{ matrix.subproject }}
        run: |
          go test ./... -race -tags=gowslmock
      #- name: Upload coverage to Codecov
      #  uses: codecov/codecov-action@v3
      #  with:
      #    file: /tmp/coverage.out

  generated-grpc:
    name: gRPC files are up to date
    runs-on: ubuntu-latest
    container: ubuntu:rolling
    strategy:
      fail-fast: false
      matrix:
        subproject: ["agentapi", "wslserviceapi"]
    steps:
      - name: Install git into the container
        run: |
          set -eu
          DEBIAN_FRONTEND=noninteractive apt update
          DEBIAN_FRONTEND=noninteractive apt install -y git
      - name: Set up git
        # This step needs to be done before checkout so that the checkout respects clrf
        uses: canonical/ubuntu-pro-for-windows/.github/actions/setup-git@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check out repository
        uses: actions/checkout@v3
      - uses: ./.github/actions/go-generate-grpc
        with:
          go-version-file: ${{ matrix.subproject }}/**/go.mod
          tools-directory: tools
          protos-directory: ${{ matrix.subproject }}
          enable-dart: ${{ matrix.subproject == 'agentapi' }}
      - name: Ensure generated gRPC files are up to date
        uses: ./.github/actions/check-diff
        with:
          files-to-validate: '${{ matrix.subproject }}/{.,**}/*.{dart,go}'
