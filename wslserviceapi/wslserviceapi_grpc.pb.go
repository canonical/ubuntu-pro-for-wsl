// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: wslserviceapi.proto

package wslserviceapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WSL_ApplyProToken_FullMethodName        = "/wslserviceapi.WSL/ApplyProToken"
	WSL_ProServiceEnablement_FullMethodName = "/wslserviceapi.WSL/ProServiceEnablement"
	WSL_Ping_FullMethodName                 = "/wslserviceapi.WSL/Ping"
)

// WSLClient is the client API for WSL service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WSLClient interface {
	ApplyProToken(ctx context.Context, in *ProAttachInfo, opts ...grpc.CallOption) (*Empty, error)
	ProServiceEnablement(ctx context.Context, in *ProService, opts ...grpc.CallOption) (*Empty, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type wSLClient struct {
	cc grpc.ClientConnInterface
}

func NewWSLClient(cc grpc.ClientConnInterface) WSLClient {
	return &wSLClient{cc}
}

func (c *wSLClient) ApplyProToken(ctx context.Context, in *ProAttachInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WSL_ApplyProToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wSLClient) ProServiceEnablement(ctx context.Context, in *ProService, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WSL_ProServiceEnablement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wSLClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, WSL_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WSLServer is the server API for WSL service.
// All implementations must embed UnimplementedWSLServer
// for forward compatibility
type WSLServer interface {
	ApplyProToken(context.Context, *ProAttachInfo) (*Empty, error)
	ProServiceEnablement(context.Context, *ProService) (*Empty, error)
	Ping(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedWSLServer()
}

// UnimplementedWSLServer must be embedded to have forward compatible implementations.
type UnimplementedWSLServer struct {
}

func (UnimplementedWSLServer) ApplyProToken(context.Context, *ProAttachInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyProToken not implemented")
}
func (UnimplementedWSLServer) ProServiceEnablement(context.Context, *ProService) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProServiceEnablement not implemented")
}
func (UnimplementedWSLServer) Ping(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedWSLServer) mustEmbedUnimplementedWSLServer() {}

// UnsafeWSLServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WSLServer will
// result in compilation errors.
type UnsafeWSLServer interface {
	mustEmbedUnimplementedWSLServer()
}

func RegisterWSLServer(s grpc.ServiceRegistrar, srv WSLServer) {
	s.RegisterService(&WSL_ServiceDesc, srv)
}

func _WSL_ApplyProToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProAttachInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSLServer).ApplyProToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WSL_ApplyProToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSLServer).ApplyProToken(ctx, req.(*ProAttachInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WSL_ProServiceEnablement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSLServer).ProServiceEnablement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WSL_ProServiceEnablement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSLServer).ProServiceEnablement(ctx, req.(*ProService))
	}
	return interceptor(ctx, in, info, handler)
}

func _WSL_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WSLServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WSL_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WSLServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WSL_ServiceDesc is the grpc.ServiceDesc for WSL service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WSL_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wslserviceapi.WSL",
	HandlerType: (*WSLServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ApplyProToken",
			Handler:    _WSL_ApplyProToken_Handler,
		},
		{
			MethodName: "ProServiceEnablement",
			Handler:    _WSL_ProServiceEnablement_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _WSL_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wslserviceapi.proto",
}
